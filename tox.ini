[tox]
minversion = 1.8
envlist =
    {py27,pypy}-{111},
    py34-{111,20}
    py{35,36,37}-{111,20,21,22}

[testenv]
deps =
    isort
    mock<2.0
    coverage
    pycodestyle
    pylint-django
    mysqlclient
    psycopg2-binary
    111: Django>=1.11,<2.0
    20: Django>=2.0,<2.1
    21: Django>=2.1,<2.2
    22: Django>=2.2,<3.0
whitelist_externals =
    make
setenv =
    PYTHONPATH = {toxinidir}:{toxinidir}/test_project
    DJANGO_SETTINGS_MODULE = test_project.settings
    mysql: DJANGO_SETTINGS_MODULE = test_project.mysql_settings
    postgres: DJANGO_SETTINGS_MODULE = test_project.postgres_settings
passenv =
    DJANGO_DB_USER
    DJANGO_DB_PASSWORD
commands =
    python -Wd {envbindir}/django-admin.py test --settings=settings --noinput {posargs:sortedm2m_tests}
    python -Wd {envbindir}/django-admin.py test --settings=postgres_settings --noinput {posargs:sortedm2m_tests}
    python -Wd {envbindir}/django-admin.py test --settings=mysql_settings --noinput {posargs:sortedm2m_tests}
    coverage run runtests.py
    make quality

[testenv:vagrant-postgres]
# A test environment utilizing a virtual machine for easy testing with
# postgresql databases. To run tests using this environment, execute:
#
#   tox -e vagrant-postgres
commands =
    vagrant up
    vagrant ssh -c "cd /vagrant && DJANGO_SETTINGS_MODULE=test_project.postgres_settings python runtests.py"

[testenv:vagrant-mysql]
# A test environment utilizing a virtual machine for easy testing with
# mysql databases. To run tests using this environment, execute:
#
#   tox -e vagrant-mysql
commands =
    vagrant up
    vagrant ssh -c "cd /vagrant && DJANGO_SETTINGS_MODULE=test_project.mysql_settings python runtests.py"
